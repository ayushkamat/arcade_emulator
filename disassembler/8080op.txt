printf("NOP");       num_bytes = 1; break;
printf("LXI B,d16"); num_bytes = 1; break;
printf("STAX B");    num_bytes = 1; break;
printf("INX B");     num_bytes = 1; break;
printf("INR B");     num_bytes = 1; break;
printf("DCR B");     num_bytes = 1; break;
printf("MVI B,d8");  num_bytes = 1; break;
printf("RLC");       num_bytes = 1; break;
printf("NOP");       num_bytes = 1; break;
printf("DAD B");     num_bytes = 1; break;
printf("LDAX B");    num_bytes = 1; break;
printf("DCX B");     num_bytes = 1; break;
printf("INR C");     num_bytes = 1; break;
printf("DCR C");     num_bytes = 1; break;
printf("MVI C,d8");  num_bytes = 1; break;
printf("RRC");       num_bytes = 1; break;
printf("NOP");       num_bytes = 1; break;
printf("LXI D,d16"); num_bytes = 1; break;
printf("STAX D");    num_bytes = 1; break;
printf("INX D");     num_bytes = 1; break;
printf("INR D");     num_bytes = 1; break;
printf("DCR D");     num_bytes = 1; break;
printf("MVI D,d8");  num_bytes = 1; break;
printf("RAL");       num_bytes = 1; break;
printf("NOP");       num_bytes = 1; break;
printf("DAD D");     num_bytes = 1; break;
printf("LDAX D");    num_bytes = 1; break;
printf("DCX D");     num_bytes = 1; break;
printf("INR E");     num_bytes = 1; break;
printf("DCR E");     num_bytes = 1; break;
printf("MVI E,d8");  num_bytes = 1; break;
printf("RAR");       num_bytes = 1; break;
printf("NOP");       num_bytes = 1; break;
printf("LXI H,d16"); num_bytes = 1; break;
printf("SHLD a16");  num_bytes = 1; break;
printf("INX H");     num_bytes = 1; break;
printf("INR H");     num_bytes = 1; break;
printf("DCR H");     num_bytes = 1; break;
printf("MVI H,d8");  num_bytes = 1; break;
printf("DAA");       num_bytes = 1; break;
printf("NOP");       num_bytes = 1; break;
printf("DAD H");     num_bytes = 1; break;
printf("LHLD a16");  num_bytes = 1; break;
printf("DCX H");     num_bytes = 1; break;
printf("INR L");     num_bytes = 1; break;
printf("DCR L");     num_bytes = 1; break;
printf("MVI L,d8");  num_bytes = 1; break;
printf("CMA");       num_bytes = 1; break;
printf("NOP");       num_bytes = 1; break;
printf("LXI SP,d16");num_bytes = 1; break;
printf("STA a16");   num_bytes = 1; break;
printf("INX SP");    num_bytes = 1; break;
printf("INR M");     num_bytes = 1; break;
printf("DCR M");     num_bytes = 1; break;
printf("MVI M,d8");  num_bytes = 1; break;
printf("STC");       num_bytes = 1; break;
printf("NOP");       num_bytes = 1; break;
printf("DAD SP");    num_bytes = 1; break;
printf("LDA a16");   num_bytes = 1; break;
printf("DCX SP");    num_bytes = 1; break;
printf("INR A");     num_bytes = 1; break;
printf("DCR A");     num_bytes = 1; break;
printf("MVI A,d8");  num_bytes = 1; break;
printf("CMC");       num_bytes = 1; break;
printf("MOV B,B");   num_bytes = 1; break;
printf("MOV B,C");   num_bytes = 1; break;
printf("MOV B,D");   num_bytes = 1; break;
printf("MOV B,E");   num_bytes = 1; break;
printf("MOV B,H");   num_bytes = 1; break;
printf("MOV B,L");   num_bytes = 1; break;
printf("MOV B,M");   num_bytes = 1; break;
printf("MOV B,A");   num_bytes = 1; break;
printf("MOV C,B");   num_bytes = 1; break;
printf("MOV C,C");   num_bytes = 1; break;
printf("MOV C,D");   num_bytes = 1; break;
printf("MOV C,E");   num_bytes = 1; break;
printf("MOV C,H");   num_bytes = 1; break;
printf("MOV C,L");   num_bytes = 1; break;
printf("MOV C,M");   num_bytes = 1; break;
printf("MOV C,A");   num_bytes = 1; break;
printf("MOV D,B");   num_bytes = 1; break;
printf("MOV D,C");   num_bytes = 1; break;
printf("MOV D,D");   num_bytes = 1; break;
printf("MOV D,E");   num_bytes = 1; break;
printf("MOV D,H");   num_bytes = 1; break;
printf("MOV D,L");   num_bytes = 1; break;
printf("MOV D,M");   num_bytes = 1; break;
printf("MOV D,A");   num_bytes = 1; break;
printf("MOV E,B");   num_bytes = 1; break;
printf("MOV E,C");   num_bytes = 1; break;
printf("MOV E,D");   num_bytes = 1; break;
printf("MOV E,E");   num_bytes = 1; break;
printf("MOV E,H");   num_bytes = 1; break;
printf("MOV E,L");   num_bytes = 1; break;
printf("MOV E,M");   num_bytes = 1; break;
printf("MOV E,A");   num_bytes = 1; break;
printf("MOV H,B");   num_bytes = 1; break;
printf("MOV H,C");   num_bytes = 1; break;
printf("MOV H,D");   num_bytes = 1; break;
printf("MOV H,E");   num_bytes = 1; break;
printf("MOV H,H");   num_bytes = 1; break;
printf("MOV H,L");   num_bytes = 1; break;
printf("MOV H,M");   num_bytes = 1; break;
printf("MOV H,A");   num_bytes = 1; break;
printf("MOV L,B");   num_bytes = 1; break;
printf("MOV L,C");   num_bytes = 1; break;
printf("MOV L,D");   num_bytes = 1; break;
printf("MOV L,E");   num_bytes = 1; break;
printf("MOV L,H");   num_bytes = 1; break;
printf("MOV L,L");   num_bytes = 1; break;
printf("MOV L,M");   num_bytes = 1; break;
printf("MOV L,A");   num_bytes = 1; break;
printf("MOV M,B");   num_bytes = 1; break;
printf("MOV M,C");   num_bytes = 1; break;
printf("MOV M,D");   num_bytes = 1; break;
printf("MOV M,E");   num_bytes = 1; break;
printf("MOV M,H");   num_bytes = 1; break;
printf("MOV M,L");   num_bytes = 1; break;
printf("HLT");       num_bytes = 1; break;
printf("MOV M,A");   num_bytes = 1; break;
printf("MOV A,B");   num_bytes = 1; break;
printf("MOV A,C");   num_bytes = 1; break;
printf("MOV A,D");   num_bytes = 1; break;
printf("MOV A,E");   num_bytes = 1; break;
printf("MOV A,H");   num_bytes = 1; break;
printf("MOV A,L");   num_bytes = 1; break;
printf("MOV A,M");   num_bytes = 1; break;
printf("MOV A,A");   num_bytes = 1; break;
printf("ADD B");     num_bytes = 1; break;
printf("ADD C");     num_bytes = 1; break;
printf("ADD D");     num_bytes = 1; break;
printf("ADD E");     num_bytes = 1; break;
printf("ADD H");     num_bytes = 1; break;
printf("ADD L");     num_bytes = 1; break;
printf("ADD M");     num_bytes = 1; break;
printf("ADD A");     num_bytes = 1; break;
printf("ADC B");     num_bytes = 1; break;
printf("ADC C");     num_bytes = 1; break;
printf("ADC D");     num_bytes = 1; break;
printf("ADC E");     num_bytes = 1; break;
printf("ADC H");     num_bytes = 1; break;
printf("ADC L");     num_bytes = 1; break;
printf("ADC M");     num_bytes = 1; break;
printf("ADC A");     num_bytes = 1; break;
printf("SUB B");     num_bytes = 1; break;
printf("SUB C");     num_bytes = 1; break;
printf("SUB D");     num_bytes = 1; break;
printf("SUB E");     num_bytes = 1; break;
printf("SUB H");     num_bytes = 1; break;
printf("SUB L");     num_bytes = 1; break;
printf("SUB M");     num_bytes = 1; break;
printf("SUB A");     num_bytes = 1; break;
printf("SBB B");     num_bytes = 1; break;
printf("SBB C");     num_bytes = 1; break;
printf("SBB D");     num_bytes = 1; break;
printf("SBB E");     num_bytes = 1; break;
printf("SBB H");     num_bytes = 1; break;
printf("SBB L");     num_bytes = 1; break;
printf("SBB M");     num_bytes = 1; break;
printf("SBB A");     num_bytes = 1; break;
printf("ANA B");     num_bytes = 1; break;
printf("ANA C");     num_bytes = 1; break;
printf("ANA D");     num_bytes = 1; break;
printf("ANA E");     num_bytes = 1; break;
printf("ANA H");     num_bytes = 1; break;
printf("ANA L");     num_bytes = 1; break;
printf("ANA M");     num_bytes = 1; break;
printf("ANA A");     num_bytes = 1; break;
printf("XRA B");     num_bytes = 1; break;
printf("XRA C");     num_bytes = 1; break;
printf("XRA D");     num_bytes = 1; break;
printf("XRA E");     num_bytes = 1; break;
printf("XRA H");     num_bytes = 1; break;
printf("XRA L");     num_bytes = 1; break;
printf("XRA M");     num_bytes = 1; break;
printf("XRA A");     num_bytes = 1; break;
printf("ORA B");     num_bytes = 1; break;
printf("ORA C");     num_bytes = 1; break;
printf("ORA D");     num_bytes = 1; break;
printf("ORA E");     num_bytes = 1; break;
printf("ORA H");     num_bytes = 1; break;
printf("ORA L");     num_bytes = 1; break;
printf("ORA M");     num_bytes = 1; break;
printf("ORA A");     num_bytes = 1; break;
printf("CMP B");     num_bytes = 1; break;
printf("CMP C");     num_bytes = 1; break;
printf("CMP D");     num_bytes = 1; break;
printf("CMP E");     num_bytes = 1; break;
printf("CMP H");     num_bytes = 1; break;
printf("CMP L");     num_bytes = 1; break;
printf("CMP M");     num_bytes = 1; break;
printf("CMP A");     num_bytes = 1; break;
printf("RNZ");       num_bytes = 1; break;
printf("POP B");     num_bytes = 1; break;
printf("JNZ a16");   num_bytes = 1; break;
printf("JMP a16");   num_bytes = 1; break;
printf("CNZ a16");   num_bytes = 1; break;
printf("PUSH B");    num_bytes = 1; break;
printf("ADI d8");    num_bytes = 1; break;
printf("RST 0");     num_bytes = 1; break;
printf("RZ");        num_bytes = 1; break;
printf("RET");       num_bytes = 1; break;
printf("JZ a16");    num_bytes = 1; break;
printf("JMP a16");   num_bytes = 1; break;
printf("CZ a16");    num_bytes = 1; break;
printf("CALL a16");  num_bytes = 1; break;
printf("ACI d8");    num_bytes = 1; break;
printf("RST 1");     num_bytes = 1; break;
printf("RNC");       num_bytes = 1; break;
printf("POP D");     num_bytes = 1; break;
printf("JNC a16");   num_bytes = 1; break;
printf("OUT d8");    num_bytes = 1; break;
printf("CNC a16");   num_bytes = 1; break;
printf("PUSH D");    num_bytes = 1; break;
printf("SUI d8");    num_bytes = 1; break;
printf("RST 2");     num_bytes = 1; break;
printf("RC");        num_bytes = 1; break;
printf("RET");       num_bytes = 1; break;
printf("JC a16");    num_bytes = 1; break;
printf("IN d8");     num_bytes = 1; break;
printf("CC a16");    num_bytes = 1; break;
printf("CALL a16");  num_bytes = 1; break;
printf("SBI d8");    num_bytes = 1; break;
printf("RST 3");     num_bytes = 1; break;
printf("RPO");       num_bytes = 1; break;
printf("POP H");     num_bytes = 1; break;
printf("JPO a16");   num_bytes = 1; break;
printf("XTHL");      num_bytes = 1; break;
printf("CPO a16");   num_bytes = 1; break;
printf("PUSH H");    num_bytes = 1; break;
printf("ANI d8");    num_bytes = 1; break;
printf("RST 4");     num_bytes = 1; break;
printf("RPE");       num_bytes = 1; break;
printf("PCHL");      num_bytes = 1; break;
printf("JPE a16");   num_bytes = 1; break;
printf("XCHG");      num_bytes = 1; break;
printf("CPE a16");   num_bytes = 1; break;
printf("CALL a16");  num_bytes = 1; break;
printf("XRI d8");    num_bytes = 1; break;
printf("RST 5");     num_bytes = 1; break;
printf("RP");        num_bytes = 1; break;
printf("POP PSW");   num_bytes = 1; break;
printf("JP a16");    num_bytes = 1; break;
printf("DI");        num_bytes = 1; break;
printf("CP a16");    num_bytes = 1; break;
printf("PUSH PSW");  num_bytes = 1; break;
printf("ORI d8");    num_bytes = 1; break;
printf("RST 6");     num_bytes = 1; break;
printf("RM");        num_bytes = 1; break;
printf("SPHL");      num_bytes = 1; break;
printf("JM a16");    num_bytes = 1; break;
printf("EI");        num_bytes = 1; break;
printf("CM a16");    num_bytes = 1; break;
printf("CALL a16");  num_bytes = 1; break;
printf("CPI d8");    num_bytes = 1; break;
printf("RST 7");     num_bytes = 1; break;
